<?php

class QueryTest extends PHPUnit_Framework_TestCase {

	/**
	 * Test the "find" method.
	 *
	 * @group laravel
	 */
	public function testFindMethodCanReturnByID()
	{
		$this->assertEquals('taylor@example.com', $this->query()->find(1)->email);
	}

	/**
	 * Test the select method.
	 *
	 * @group laravel
	 */
	public function testSelectMethodLimitsColumns()
	{
		$result = $this->query()->select(array('email'))->first();

		$this->assertTrue(isset($result->email));
		$this->assertFalse(isset($result->name));
	}

	/**
	 * Test the raw_where method.
	 *
	 * @group laravel
	 */
	public function testRawWhereCanBeUsed()
	{

	}

	/**
	 * Test the union and union_all methods
	 * @group laravel
	 */
	public function testUnion()
	{
		$q1 = $this->query()
			->where('age', '<', 40)
			->where('username', 'LIKE', 'a%')
			->select(array('age', 'username', 'sex'));
		$q2 = $this->query()
			->where('age', '>', 20)
			->where('username', 'LIKE', 'b%')
			->select(array('age', 'username', 'sex'));
		$sql1 = '(SELECT "age", "username", "sex" FROM "query_test" WHERE "age" < ? AND "username" LIKE ?)';
		$sql2 = '(SELECT "age", "username", "sex" FROM "query_test" WHERE "age" > ? AND "username" LIKE ?)';

		$cases = array(
			array(
				(function() use ($q1, $q2, $sql1, $sql2)
				{
					return $q1->union($q2, 'results')
						->where('sex', '=', 'male');
				}),
				"SELECT * FROM ($sql1 UNION $sql2) \"results\" WHERE \"sex\" = ?",
				array(40, 'a%', 20, 'b%', 'male')
			),
			array(
				(function() use ($q1, $q2, $sql1, $sql2)
				{
					return $q1->union_all(array($q2, $q2), 'results');
				}),
				"SELECT * FROM ($sql1 UNION ALL $sql2 UNION ALL $sql2) \"results\"",
				array(40, 'a%', 20, 'b%', 20, 'b%')
			),
			array(
				(function() use ($q1, $q2, $sql1, $sql2)
				{
					return $q1->union_all(function($union) use ($q2) {
						$union->add($q2);
						$union->add_all($q2);
					}, 'results');
				}),
				"SELECT * FROM ($sql1 UNION $sql2 UNION ALL $sql2) \"results\"",
				array(40, 'a%', 20, 'b%', 20, 'b%')
			),
			array(
				(function() use ($q1, $q2, $sql1, $sql2)
				{
					return $q1->union($q2, 'results1')
						->where('sex', '=', 'male')
						->union_all($q2, 'results2');
				}),
				"SELECT * FROM ((SELECT * FROM ($sql1 UNION $sql2) \"results1\" WHERE \"sex\" = ?) UNION ALL $sql2) \"results2\"",
				array(40, 'a%', 20, 'b%', 'male', 20, 'b%')
			)
		);

		foreach ($cases as $case)
		{
			$f= $case[0];
			list($actual_sql, $actual_bindings) = $this->get_sql_bindings($f());
			$this->assertEquals($case[1], $actual_sql);
			$this->assertEquals($case[2], $actual_bindings);
		}
	}

	/**
	 * Get the sql code generated by transferred instance of Query and
	 * bindings parameters contained in this object
	 * @param  Query  $query
	 * @param  array  $columns
	 * @return array
	 */
	private function get_sql_bindings($query, $columns = array('*'))
	{
		if (is_null($query->selects)) $query->select($columns);
		return array($query->grammar->select($query), $query->bindings);
	}

	/**
	 * Get the query instance for the test case.
	 *
	 * @return Query
	 */
	protected function query()
	{
		return DB::table('query_test');
	}

}